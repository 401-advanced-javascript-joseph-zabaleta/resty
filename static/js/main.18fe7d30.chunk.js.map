{"version":3,"sources":["components/header/header.jsx","components/form/methodButton.jsx","components/error/error.jsx","components/form/form.jsx","components/results/results.jsx","components/main/main.jsx","components/footer/footer.jsx","app.jsx","serviceWorker.js","index.js"],"names":["Header","React","Component","MethodButton","props","handleClick","bind","event","this","methodChange","method","className","activeMethod","onClick","errorComponent","errorText","id","Form","state","url","requestBody","handleURLChange","handleRequestBodyChange","executeRequest","listCallback","e","setState","target","value","config","crossdomain","axios","get","results","JSON","parse","post","processResults","displaySection","onChange","type","rows","cols","Results","src","headers","style","width","data","length","Main","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.18fe7d30.chunk.js","sourcesContent":["import React from 'react';\nimport './header.scss';\n\nexport default class Header extends React.Component {\n\n    render() {\n\n        return (\n\n            <header>\n                <h1>\n                    RESTy\n                </h1>\n            </header>\n\n        );\n\n    };\n\n};\n\n\n","import React from 'react';\n\nexport default class MethodButton extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.handleClick = this.handleClick.bind(this);\n    };\n\n\n    handleClick(event) {\n\n        this.props.methodChange(this.props.method);\n\n    };\n\n\n    render() {\n\n        let className = this.props.method === this.props.activeMethod ? 'activeButton' : 'inactiveButton';\n\n        return (\n\n            <li className={className} onClick={this.handleClick}>\n                {this.props.method}\n            </li>\n\n        );\n\n    };\n\n};\n","import React from 'react';\nimport './error.scss';\n\n\nexport default function errorComponent(props) {\n\n    if (!props.errorText) return (<></>);\n\n    return (\n        <div id='errorBanner'>\n            <p>\n                {props.errorText}\n            </p>\n        </div>\n    );\n\n\n};\n","import React from 'react';\nimport './form.scss';\nimport axios from 'axios';\n\nimport MethodButton from './methodButton.jsx';\nimport ErrorComponent from '../error/error.jsx';\n\nexport default class Form extends React.Component {\n\n    constructor(props) {\n\n        super(props);\n        this.state = {\n\n            method: 'GET',\n            url: 'http://localhost:3001/api/v1/categories',\n            requestBody: {},\n            errorText: '',\n\n        };\n\n        this.handleURLChange = this.handleURLChange.bind(this);\n        this.handleRequestBodyChange = this.handleRequestBodyChange.bind(this);\n        this.executeRequest = this.executeRequest.bind(this);\n        this.listCallback = this.listCallback.bind(this);\n\n    };\n\n\n    handleURLChange(e) {\n\n        this.setState({\n            url: e.target.value\n        });\n\n    };\n\n\n    handleRequestBodyChange(e) {\n\n        this.setState({\n            requestBody: e.target.value\n        });\n\n    };\n\n    async executeRequest(e) {\n\n        let results;\n        let config = { crossdomain: true };\n\n        switch (this.state.method) {\n\n            case 'GET':\n\n                try {\n\n                    results = await axios.get(this.state.url, config);\n\n                } catch (error) {\n                    throw error;\n                };\n\n                break;\n\n            case 'POST':\n\n                let requestBody;\n\n                try {\n\n                    requestBody = JSON.parse(this.state.requestBody);\n\n                } catch (error) {\n\n                    this.setState({\n                        errorText: 'Invalid Request Body. Please ensure the request body is in proper JSON format'\n                    });\n\n                    return;\n\n                };\n\n                try {\n\n                    results = await axios.post(this.state.url, requestBody, config);\n\n                } catch (error) {\n\n                    throw error;\n\n                };\n\n                break;\n\n            default:\n                break;\n\n        }\n\n        this.setState({\n            errorText: ''\n        });\n\n        this.props.processResults(results);\n\n    };\n\n\n    listCallback(method) {\n\n        this.setState({\n            method: method,\n            displaySection: false,\n        });\n\n    };\n\n\n    render() {\n\n        return (\n\n            <div id='form-container'>\n\n                <ErrorComponent errorText={this.state.errorText} />\n\n                <div id='form'>\n\n                    <section id='url-input'>\n                        <label>\n                            URL:\n                        </label>\n\n                        <input onChange={this.handleURLChange} value={this.state.url} type='text'></input>\n\n                        <button onClick={this.executeRequest}>\n                            GO!\n                        </button>\n                    </section>\n\n\n                    <ul>\n\n                        <MethodButton method='GET' activeMethod={this.state.method} methodChange={this.listCallback} />\n                        <MethodButton method='POST' activeMethod={this.state.method} methodChange={this.listCallback} />\n                        <MethodButton method='PUT' activeMethod={this.state.method} methodChange={this.listCallback} />\n                        <MethodButton method='DELETE' activeMethod={this.state.method} methodChange={this.listCallback} />\n\n                        <textarea onChange={this.handleRequestBodyChange} id='request-body-textarea' rows=\"10\" cols=\"5\"></textarea>\n                    </ul>\n\n                </div>\n\n            </div>\n\n        );\n\n    };\n\n};\n","import React from 'react';\nimport ReactJson from 'react-json-view';\n\nimport './results.scss';\n\nexport default function Results(props) {\n\n\n    if (!props.results) return (<></>);\n\n    let style = {\n        width: \"500px\",\n    }\n\n    return (\n\n        <div id='response-container'>\n\n\n            <div id='header-container'>\n                <h3>\n                    Headers\n                </h3>\n                {/* <pre>\n                    {JSON.stringify(props.results.headers, null, 2)}\n                </pre> */}\n                <ReactJson src={props.results.headers} style={style} />\n\n            </div>\n\n            <div id='results-container'>\n                <h3>\n                    Results: {props.results.data.length} items\n                </h3>\n                {/* <pre>\n                    {JSON.stringify(props.results.data, null, 2)}\n                </pre> */}\n\n                <ReactJson src={props.results.data} />\n\n            </div>\n\n        </div>\n\n    );\n\n};\n","import React from 'react';\n\nimport Form from '../form/form.jsx';\nimport Results from '../results/results.jsx';\nimport './main.scss';\n\nexport default class Main extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            results: null,\n        };\n\n        this.processResults = this.processResults.bind(this);\n    };\n\n\n    processResults(results) {\n\n        this.setState({\n            results: results\n        });\n\n    };\n\n\n\n    render() {\n\n        return (\n\n            <div id='main'>\n                <Form processResults={this.processResults} />\n\n\n                    <Results results={this.state.results} />\n                    \n            </div>\n\n        );\n\n    };\n\n};\n","import React from 'react';\nimport './footer.scss';\n\nexport default class Footer extends React.Component {\n\n    render() {\n\n        return (\n\n            <footer>\n                &copy; Copyright 2020 Joseph Zabaleta\n            </footer>\n\n        );\n\n    };\n\n};\n\n","import React from 'react';\nimport './app.scss';\n\nimport Header from './components/header/header.jsx';\nimport Main from './components/main/main.jsx';\nimport Footer from './components/footer/footer.jsx';\n\nexport default class App extends React.Component {\n\n    render() {\n\n        return (\n\n            <div>\n                <Header />\n                <Main />\n                <Footer />\n            </div>\n\n        );\n\n    };\n\n};\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n\n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n\n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n\n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n\n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n\n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n\n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n\n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n\n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}