{"version":3,"sources":["components/header/header.jsx","components/form/methodButton.jsx","components/form/form.jsx","components/results/results.jsx","components/history/list/list.jsx","components/history/history.jsx","components/error/error.jsx","utils/storage-service.js","components/main/main.jsx","components/footer/footer.jsx","app.jsx","serviceWorker.js","index.js"],"names":["Header","to","activeClassName","React","Component","MethodButton","props","handleClick","bind","event","this","methodChange","method","className","activeMethod","onClick","Form","request","url","data","state","handleURLChange","handleRequestBodyChange","listCallback","previousProps","_","isEqual","setState","e","target","value","console","log","updated_src","id","children","onChange","type","executeRequest","src","style","padding","minWidth","displayDataTypes","onEdit","onAdd","theme","Results","results","headers","length","List","entry","response","history","slice","reverse","map","index","key","History","updateFormDefaults","errorComponent","errorText","StorageService","item","requestHistory","retrieve","_compare","push","localStorage","setItem","JSON","stringify","flag","forEach","_isPresent","parse","getItem","Main","config","crossdomain","axios","save","exact","path","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c39ab73f.chunk.js","sourcesContent":["import React from 'react';\nimport { Link, NavLink } from 'react-router-dom';\nimport './header.scss';\n\nexport default class Header extends React.Component {\n\n    render() {\n\n        return (\n\n            <header>\n                <h1>\n                    RESTy\n                </h1>\n                <nav>\n                    <ul>\n                        <li>\n                            <Link to='/'>Home</Link>\n                        </li>\n                        <li>\n                            <NavLink activeClassName=\"active\" to='/history'>History</NavLink>\n                        </li>\n                        <li>\n                            <NavLink activeClassName=\"active\" to='/help'>Help</NavLink>\n                        </li>\n                    </ul>\n                </nav>\n\n            </header>\n\n        );\n\n    };\n\n};\n\n\n","import React from 'react';\n\nexport default class MethodButton extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.handleClick = this.handleClick.bind(this);\n    };\n\n\n    handleClick(event) {\n\n        this.props.methodChange(this.props.method);\n\n    };\n\n\n    render() {\n\n        let className = this.props.method === this.props.activeMethod ? 'activeButton' : 'inactiveButton';\n\n        return (\n\n            <li className={className} onClick={this.handleClick}>\n                {this.props.method}\n            </li>\n\n        );\n\n    };\n\n};\n","import React from 'react';\nimport './form.scss';\nimport _ from 'lodash';\nimport ReactJson from 'react-json-view';\n\nimport MethodButton from './methodButton.jsx';\n\nexport default class Form extends React.Component {\n\n    constructor(props) {\n\n        const method = props.request.method || 'GET'\n        const url = props.request.url || ''\n        const data = props.request.data || {}\n\n\n        super(props);\n        this.state = {\n\n            method,\n            url,\n            data,\n\n        };\n\n        this.handleURLChange = this.handleURLChange.bind(this);\n        this.handleRequestBodyChange = this.handleRequestBodyChange.bind(this);\n        this.listCallback = this.listCallback.bind(this);\n\n    };\n\n    componentDidUpdate(previousProps) {\n\n        if (!_.isEqual(previousProps.request, this.props.request)) {\n            this.setState({\n                method: this.props.request.request.method,\n                url: this.props.request.request.url,\n                data: this.props.request.request.data,\n            })\n        };\n\n    };\n\n\n    handleURLChange(e) {\n\n        this.setState({\n            url: e.target.value\n        });\n\n    };\n\n\n    handleRequestBodyChange(e) {\n\n        console.log(e)\n\n        this.setState({\n            data: e.updated_src\n        });\n\n    };\n\n\n    listCallback(method) {\n\n        this.setState({\n            method,\n        });\n\n    };\n\n\n    render() {\n\n        let style = {\n            padding: \"3px\",\n            \"borderRadius\": \"5px\",\n            \"minHeight\": \"100px\",\n            minWidth: \"50%\",\n        }\n\n        return (\n\n            <div id='form-container'>\n\n                {this.props.children}\n\n                <div id='form'>\n\n                    <section id='url-input'>\n                        <label>\n                            URL:\n                        </label>\n\n                        <input onChange={this.handleURLChange} value={this.state.url} type='text'></input>\n\n                        <button onClick={() => { this.props.executeRequest(this.state) }}>\n                            GO!\n                        </button>\n                    </section>\n\n\n                    <ul>\n\n                        <MethodButton method='GET' activeMethod={this.state.method} methodChange={this.listCallback} />\n                        <MethodButton method='POST' activeMethod={this.state.method} methodChange={this.listCallback} />\n                        <MethodButton method='PUT' activeMethod={this.state.method} methodChange={this.listCallback} />\n                        <MethodButton method='DELETE' activeMethod={this.state.method} methodChange={this.listCallback} />\n\n                        {this.state.method === 'GET' || this.state.method === 'DELETE' ? <></> :\n\n                            <ReactJson src={this.state.data} style={style} displayDataTypes={false} onEdit={this.handleRequestBodyChange} onAdd={this.handleRequestBodyChange} theme=\"tube\" />\n                        }\n                    </ul>\n\n                </div>\n\n            </div>\n\n        );\n\n    };\n\n};\n","import React from 'react';\nimport ReactJson from 'react-json-view';\n\nimport './results.scss';\n\nexport default function Results(props) {\n\n\n    if (!props.results) return (<></>);\n\n    let style = {\n        padding: \"5px\",\n        \"borderRadius\": \"5px\",\n        \"minHeight\": \"100px\",\n    }\n\n    return (\n\n        <div id='response-container'>\n\n\n            <h3>\n                Headers\n            </h3>\n            <div id='header-container'>\n\n                <ReactJson src={props.results.headers} style={style} displayDataTypes={false} theme=\"tube\" />\n\n            </div>\n\n            <h3>\n                Results: {props.results.data.length} items\n            </h3>\n            <div id='results-container'>\n\n                <ReactJson src={props.results.data} style={style} displayDataTypes={false} theme=\"tube\" />\n\n            </div>\n\n        </div>\n\n    );\n\n};\n","import React from 'react';\nimport Results from '../../results/results.jsx';\nimport './list.scss';\n\nexport default class List extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.handleClick = this.handleClick.bind(this);\n        this.state = {\n\n            results: null\n\n        }\n    }\n\n    handleClick(entry) {\n\n        this.setState({\n            results: entry.response\n        });\n\n    };\n\n\n    render() {\n\n        return (\n\n            <section id='history-page'>\n\n                <aside>\n                    {this.props.history.slice(0).reverse().map((entry, index) => (\n\n                        <div className=\"url\" key={index}>\n                            <span onClick={() => { this.handleClick(entry) }}>\n\n                                <button>\n                                    {entry.request.method}\n                                </button>\n\n                                {entry.request.url}\n                            </span>\n                        </div>\n\n                    ))}\n                </aside>\n\n                <article>\n                    <Results results={this.state.results} />\n                </article>\n\n            </section>\n        )\n\n    };\n};\n\n","import React from 'react';\nimport './history.scss';\n\n\nexport default function History(props) {\n\n    if (props.history.length === 0) return (<></>);\n\n    return (\n\n        <div id='history-container'>\n\n            { props.history.slice(0).reverse().map((entry, index) => (\n\n\n                <div key={index}>\n\n\n                    <span>\n                        <button onClick={() => props.updateFormDefaults(entry)}>{entry.request.method}</button>\n                        {entry.request.url}\n                    </span>\n\n                </div>\n\n\n\n            ))}\n\n        </div>\n\n    );\n\n};\n","import React from 'react';\nimport './error.scss';\n\n\nexport default function errorComponent(props) {\n\n    if (!props.errorText) return (<></>);\n\n    return (\n        <div id='errorBanner'>\n            <p>\n                {props.errorText}\n            </p>\n        </div>\n    );\n\n\n};\n","import _ from 'lodash';\n\n/**\n * Local Storage Service\n *\n * Designed to manage all actions with the local storage\n * @class\n */\nexport default class StorageService {\n\n\n    /**\n     * Saves unique requests to requestHistory in local storage\n     * @param {*} item\n     */\n    static save(item) {\n\n        let requestHistory = this.retrieve();\n\n\n\n        if (!this._compare(item, requestHistory)) {\n\n            requestHistory.push(item);\n            localStorage.setItem('requestHistory', JSON.stringify(requestHistory));\n\n        }\n\n        return requestHistory;\n\n    };\n\n\n    /**\n     * Runs a deep comparison of two items\n     * @param {*} item\n     */\n    static _compare(item, history) {\n\n        let flag = false;\n\n        history.forEach(entry => {\n\n            if (_.isEqual(item.request, entry.request)) {\n                flag = true;\n            };\n\n        });\n\n        return flag;\n\n    };\n\n\n    /**\n     * Retrieves items from local storage\n     * @returns {{JSON}}\n     */\n    static retrieve() {\n\n        if (this._isPresent()) {\n\n            return JSON.parse(localStorage.getItem('requestHistory'));\n\n        } else {\n\n            return [];\n\n        };\n\n    };\n\n\n    /**\n     * Checks local storage for requestHistory\n     * @returns {Boolean}\n     */\n    static _isPresent() {\n\n        return localStorage.getItem('requestHistory') ? true : false;\n\n    };\n\n};\n","import React from 'react';\nimport axios from 'axios';\nimport { Route, Switch } from 'react-router-dom';\n\n\nimport Form from '../form/form.jsx';\nimport List from '../history/list/list.jsx';\nimport Results from '../results/results.jsx';\nimport History from '../history/history.jsx';\nimport ErrorComponent from '../error/error.jsx';\nimport StorageService from '../../utils/storage-service.js';\nimport './main.scss';\n\n\nexport default class Main extends React.Component {\n\n    constructor(props) {\n\n        const history = StorageService.retrieve();\n\n        super(props)\n        this.state = {\n            results: null,\n            request: {\n                method: 'GET',\n                url: '',\n                data: {},\n            },\n            history,\n            errorText: '',\n        };\n\n        this.executeRequest = this.executeRequest.bind(this);\n        this.updateFormDefaults = this.updateFormDefaults.bind(this);\n    };\n\n\n\n    async executeRequest(request) {\n\n        let config = { crossdomain: true };\n\n        try {\n\n            if (!request.url) {\n                this.setState({\n                    errorText: 'Please provide a valid endpoint URL'\n                });\n\n                return;\n            }\n\n            let response = await axios(request, config);\n\n            // console.log(response);\n\n            let history = StorageService.save({ request, response });\n\n            this.setState({\n                results: response,\n                history,\n                errorText: ''\n            });\n\n\n\n        } catch (error) {\n\n            this.setState({\n                errorText: 'Invalid Request Body. Please ensure the request body is in proper JSON format'\n            });\n            // throw error;\n        };\n\n    };\n\n\n    updateFormDefaults(entry) {\n\n        this.setState({\n            request: entry\n        });\n\n    };\n\n\n\n    render() {\n\n        return (\n\n            <div id='main'>\n\n                <Switch>\n                    <Route exact path='/'>\n\n                        <Form request={this.state.request} executeRequest={this.executeRequest} >\n                            <ErrorComponent errorText={this.state.errorText} />\n                        </Form>\n\n                        <section>\n                            <History history={this.state.history} updateFormDefaults={this.updateFormDefaults} />\n                            <Results results={this.state.results} />\n                        </section>\n\n                    </Route>\n\n                    <Route exact path='/history'>\n                        <List history={this.state.history} />\n                    </Route>\n\n                    <Route exact path='/Help'>\n                        <h1> Help coming soon!</h1>\n                    </Route>\n\n                    <Route>\n                        <div> 404 error , no route found!</div>\n                    </Route>\n\n                </Switch>\n\n\n            </div>\n\n        );\n\n    };\n\n};\n","import React from 'react';\nimport './footer.scss';\n\nexport default class Footer extends React.Component {\n\n    render() {\n\n        return (\n\n            <footer>\n                &copy; Copyright 2020 Joseph Zabaleta\n            </footer>\n\n        );\n\n    };\n\n};\n\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport './app.scss';\n\nimport Header from './components/header/header.jsx';\nimport Main from './components/main/main.jsx';\nimport Footer from './components/footer/footer.jsx';\n\nexport default class App extends React.Component {\n\n    render() {\n\n        return (\n\n            <>\n                <BrowserRouter>\n                    <Header />\n                    <Main />\n                    <Footer />\n                </BrowserRouter>\n            </>\n\n        );\n\n    };\n\n};\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n\n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n\n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n\n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n\n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n\n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n\n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n\n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n\n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}